<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[经验]Ubuntu Linux 魔改手册</title>
      <link href="/post/better-ubuntu-linux/"/>
      <url>/post/better-ubuntu-linux/</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>因为个人审美的不同，<br>我对于 Ubuntu Linux 的现状并不是很满意，<br>所以我决定把看不顺眼的地方 统 统 改 掉！<br>这是我的个人经验，希望有用。</p>          </div><h2 id="linux-主题"><a class="markdownIt-Anchor" href="#linux-主题"></a> Linux 主题</h2><p>虽然 Ubuntu 本身的主题也不错，<br>但是我更喜欢 <strong>flat-remix</strong> 主题，<br><s>虽然这个主题有点卡，但它就是香</s>。</p><p>我所安装的主题包含以下三个：</p><ol><li><a href="https://drasite.com/flat-remix" target="_blank" rel="noopener">Flat Remix ICON theme</a></li><li><a href="https://drasite.com/flat-remix-gnome" target="_blank" rel="noopener">Flat Remix GNOME theme</a></li><li><a href="https://drasite.com/flat-remix-gtk" target="_blank" rel="noopener">Flat Remix GTK theme</a></li></ol><h3 id="安装-gnome"><a class="markdownIt-Anchor" href="#安装-gnome"></a> 安装 gnome</h3><p>这款主题是需要 <a href="https://www.gnome.org/" target="_blank" rel="noopener">gnome</a> 桌面环境支持的，<br>可以运行以下命令安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome</span></pre></td></tr></table></figure><p>接下来等就完事儿了，但是有个缺点，<br>这会安装一系列娱乐软件<s>游戏</s>。<br>运行以下命令卸载它们：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove gnome-games</span></pre></td></tr></table></figure><p>接着检查一下有没有没卸干净的，手动卸载。</p><h3 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h3><p>首先是<a href="https://drasite.com/flat-remix" target="_blank" rel="noopener">Flat Remix ICON</a>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:daniruiz/flat-remix</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get update</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get install flat-remix</span></pre></td></tr></table></figure><p>接着是<a href="https://drasite.com/flat-remix-gtk" target="_blank" rel="noopener">Flat Remix GTK</a>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:daniruiz/flat-remix</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get update</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get install flat-remix-gtk</span></pre></td></tr></table></figure><p>最后是<a href="https://drasite.com/flat-remix-gnome" target="_blank" rel="noopener">Flat Remix Gnome</a>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:daniruiz/flat-remix</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get update</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get install flat-remix-gnome</span></pre></td></tr></table></figure><p>然后就完成了安装。</p><h3 id="应用主题"><a class="markdownIt-Anchor" href="#应用主题"></a> 应用主题</h3><h4 id="系统主题"><a class="markdownIt-Anchor" href="#系统主题"></a> 系统主题</h4><p>首先，你需要打开 GNOME Tweaks 。<br>并打开<strong>扩展</strong>选项。（此图片已使用主题）<br><strong>注：若无法开启请重启 Ubuntu Linux</strong></p><p><img alt="gnome-tweak" data-src="https://s2.ax1x.com/2019/12/21/QvoNbq.png" class="lazyload"></p><p>接着打开 User themes 的插件</p><p><strong>注：若无法开启请重启 Ubuntu Linux</strong></p><p><img alt="gnome-tweak-option" data-src="https://s2.ax1x.com/2019/12/21/Qvb9Qe.png" class="lazyload"></p><p>之后在<strong>外观</strong>中选择你喜欢的主题<br>比如向我这样：</p><p><img alt="gnome-tweak-exterior" data-src="https://s2.ax1x.com/2019/12/21/QvbJYV.png" class="lazyload"></p><h4 id="登录主题"><a class="markdownIt-Anchor" href="#登录主题"></a> 登录主题</h4><p><strong>注意！</strong><br>请确保你能够在失败的情况下重新安装 gnome-shell / gdm。</p><p>首先你需要安装 imagemagick 和 glib-compile-resources ：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libglib2.0-dev-bin imagemagick</span></pre></td></tr></table></figure><p>接着运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https：// github.com / daniruiz / flat-remix-gnome</span></pre></td></tr></table></figure><p>然后选择好你的锁屏壁纸，<br>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> flat-remix-gnome</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo make &amp;&amp; sudo make install</span></pre></td></tr></table></figure><p>每次重新选择壁纸后都要重新应用，<br>即重新运行以上命令。</p><h3 id="显示主题"><a class="markdownIt-Anchor" href="#显示主题"></a> 显示主题</h3><p>如果你有主题没有应用成功，<br>那么清重启 Ubuntu Linux。</p><p>并在开机时的登录界面上寻找“齿轮”，<br>它一般位于确认按钮的旁边。<br>接下来选择你想要的主体就好了。<br>这里给出官方图片的展示：</p><p><img alt="login screen theme selector" data-src="https://drasite.com/img/gdm-session-selector.jpg" class="lazyload"></p><h2 id="参考与引用"><a class="markdownIt-Anchor" href="#参考与引用"></a> 参考与引用</h2><ul><li><a href="https://drasite.com/flat-remix-gnome" target="_blank" rel="noopener">Flat Remix GNOME theme</a></li><li><a href="https://drasite.com/flat-remix-gtk" target="_blank" rel="noopener">Flat Remix GTK theme</a></li><li><a href="https://drasite.com/flat-remix" target="_blank" rel="noopener">Flat Remix ICON theme</a></li></ul><div class="note default no-icon">            <h2 id="内容修改与更新"><a class="markdownIt-Anchor" href="#内容修改与更新"></a> 内容修改与更新</h2><p><strong>2019-12-21</strong> 添加了关于 Flat-Remix 主题的应用。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[笔记]血泪教训集</title>
      <link href="/post/mistake/"/>
      <url>/post/mistake/</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>这里记录了我和我的伙伴们的错题，作为警示，以防再错。</p>          </div><h2 id="自己的血泪"><a class="markdownIt-Anchor" href="#自己的血泪"></a> 自己的血泪</h2><h3 id="关于-long-long"><a class="markdownIt-Anchor" href="#关于-long-long"></a> 关于 <code>long long</code></h3><ul><li>爆<code>long long</code>最好的办法是使用<code>long double</code>.(对于整型)</li></ul><p>(括号内的类型表示存储类型,实际上并不能像这样进行强制类型转换)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> (<span class="keyword">long</span> <span class="keyword">long</span>)  <span class="built_in">pow</span> ( <span class="number">2</span> , <span class="number">64</span> ) == <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="keyword">long</span> <span class="keyword">double</span>) <span class="built_in">pow</span> ( <span class="number">2</span> , <span class="number">64</span> ) == <span class="number">18446744073709551616.000000</span></span></pre></td></tr></table></figure><h3 id="按范围给算法"><a class="markdownIt-Anchor" href="#按范围给算法"></a> 按范围给算法</h3><ul><li>如果不能保证正解的完全正确性,在小数据时使用暴力也是不错的.(至少不会一错全错)</li></ul><p>像这样:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( n &lt;= <span class="number">1000</span> ) </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       brute () ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( n &lt;= <span class="number">10000</span> ) </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       solution () ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="临界表存图与空间"><a class="markdownIt-Anchor" href="#临界表存图与空间"></a> 临界表存图与空间</h3><ul><li>无向图存边,开双倍空间!(天知道我为这错误调试了多久)</li></ul><p>对于无向图临界表存边来说,下面这操作很显然这样会数组越界(一条无向边 等于 两条互通的有向边)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MAXM 是图的边数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">node e[ MAXM ] ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//接着在主函数里</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( m -- )</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    u = read () ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    v = read () ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    addedge ( u , v ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    addedge ( v , u ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>那么显然,上面的做法等待它的是 <strong>RE</strong> 和 <strong>WA</strong> ,所以应该这么干:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">node e[ <span class="number">2</span> * MAXM ] ;</span></pre></td></tr></table></figure><h3 id="bfs-的-flag-标记"><a class="markdownIt-Anchor" href="#bfs-的-flag-标记"></a> BFS 的 <code>flag</code> 标记</h3><ul><li>用 BFS 水图论题的分还是可以的，但一定要记得对 <code>flag</code> 标记进行<strong>检查</strong>和<strong>更新</strong>！</li></ul><p>比如下面这个图上 BFS 就会超时：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">deque</span> &lt; <span class="keyword">int</span> &gt; que ;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag [ MAXN ] ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span> <span class="params">( <span class="keyword">int</span> source , <span class="keyword">int</span> goal )</span> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span> ( flag , <span class="number">0</span> , <span class="keyword">sizeof</span> ( flag ) ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    que . clear ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    que . push_back ( source ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    flag [ source ] = <span class="literal">true</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( ! que.empty ( ) )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        source = que . front ( ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        que . pop_front ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="built_in">list</span> [ source ] ; i ; i = e [ i ] . last )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> v = e [ i ] . to ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ( ! flag [ v ] )</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> ( v == goal )</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                que . push_back ( v ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>所以要这么改：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">deque</span> &lt; <span class="keyword">int</span> &gt; que ;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag [ MAXN ] ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span> <span class="params">( <span class="keyword">int</span> source , <span class="keyword">int</span> goal )</span> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span> ( flag , <span class="number">0</span> , <span class="keyword">sizeof</span> ( flag ) ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    que . clear ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    que . push_back ( source ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    flag [ source ] = <span class="literal">true</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( ! que.empty ( ) )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        source = que . front ( ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        que . pop_front ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="built_in">list</span> [ source ] ; i ; i = e [ i ] . last )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> v = e [ i ] . to ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ( ! flag [ v ] )</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                flag [ v ] = <span class="literal">true</span> ; <span class="comment">//起死回生，妙手回春</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> ( v == goal )</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                que . push_back ( v ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="欲用矩阵先判重边"><a class="markdownIt-Anchor" href="#欲用矩阵先判重边"></a> 欲用矩阵·先判重边</h3><ul><li>虽然 <strong>邻接表</strong> 和 <strong>链式前向星</strong> 非常香，但有时 <strong>邻接矩阵</strong> 可能会更好。不过一定要注意重边的判断！</li></ul><p>例如这样就会被重边卡：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> e [ MAXN ] [ MAXN ] ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">e [ u ] [ v ] = <span class="literal">true</span> ; <span class="comment">//加边</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e [ u ] [ v ] = <span class="literal">false</span> ; <span class="comment">//删边</span></span></pre></td></tr></table></figure><p>所以要这么干：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> e [ MAXN ] [ MAXN ] ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">e [ u ] [ v ] ++ ; <span class="comment">//加边</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e [ u ] [ v ] -- ; <span class="comment">//删边</span></span></pre></td></tr></table></figure><h3 id="dinic-的异或问题"><a class="markdownIt-Anchor" href="#dinic-的异或问题"></a> Dinic 的异或问题</h3><ul><li>解决网络最大流的最好办法当然就是是 Dinic 了（ <s>因为 Ford-Fulkerson 和 Edmond-Karp 几乎没有实战价值</s> ），但是对于<strong>邻接表</strong>存储的<strong>反向边</strong>的处理时的<code>^</code>一定要注意！</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">e [ i ] . cap -= d ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">e [ i ^ <span class="number">1</span> ] . cap += d ;</span></pre></td></tr></table></figure><p>对，这没问题，问题在于存边的<code>edgecnt</code>。<br />如果是这样的话：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> edgecnt = <span class="number">0</span> ；</span></pre></td></tr></table></figure><p>就会出错。因此，从 1 开始是个不错的选择：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> edgecnt = <span class="number">1</span> ;</span></pre></td></tr></table></figure><h2 id="别人的教训"><a class="markdownIt-Anchor" href="#别人的教训"></a> 别人的教训</h2><h3 id="空格邪教来自jesse26"><a class="markdownIt-Anchor" href="#空格邪教来自jesse26"></a> 空格邪教(来自<a href="https://www.luogu.org/user/212992" target="_blank" rel="noopener">Jesse26</a>)</h3><ul><li>打空格固然是个不错的习惯,但是对于 <strong>“”</strong> 里的内容来说可就不太好了.</li></ul><p>这样是对的:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">freopen ( <span class="string">"code.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> ) ;</span></pre></td></tr></table></figure><p>但是这样就不对了:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">freopen ( <span class="string">"code.in"</span> , <span class="string">" r"</span> , <span class="built_in">stdin</span> ) ;</span></pre></td></tr></table></figure><h3 id="万恶的来自eqvpkbz"><a class="markdownIt-Anchor" href="#万恶的来自eqvpkbz"></a> 万恶的<code>/</code>(来自<a href="https://github.com/eqvpkbz" target="_blank" rel="noopener">Eqvpkbz</a>)</h3><ul><li>在做除法运算时一定要注意是否有<code>/0</code>的运算,<code>nan</code>和<code>inf</code>可不是闹着玩的.</li></ul><p>如果有下面这些情况,那就尴尬了.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a , b ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//经历一系列运算后,a==1,b==0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"%Lf"</span> , a / b ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//我们便得到了 inf</span></span></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a , b ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//又经历一系列运算后,a==0,b==0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"%Lf"</span> , a / b ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//我们又有了 nan</span></span></pre></td></tr></table></figure><ul><li>同时浮点运算也有锅</li></ul><p>比如这样:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//经历一系列运算后,a == -0.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//对,很让人疑惑,但终端里就是"-0.000000"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//我也没办法......</span></span></pre></td></tr></table></figure><h3 id="静态调试万般好来自zmy123456"><a class="markdownIt-Anchor" href="#静态调试万般好来自zmy123456"></a> 静态调试万般好(来自<a href="https://www.luogu.com.cn/user/44840" target="_blank" rel="noopener">zmy123456</a>)</h3><ul><li>当 VScode 或 Dev-cpp 的调试坏了的时候，就可以在程序里输出变量进行查看。</li></ul><p>像这样：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"---DEBUG---\n"</span> ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"x=%d\ty=%d\n"</span> , galaxy [ i ] . x , galaxy [ i ] . y) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"size=%d\n"</span> , galaxy [ i ] . size) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"ulcnt=%d\n"</span> , galaxy [ i ] . ulcnt ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"urcnt=%d\n"</span> , galaxy [ i ] . urcnt ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"planet="</span> ) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; galaxy [ i ] . size ; j ++ )</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; galaxy [ i ] . planet [ j ]  ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> ( <span class="string">"\n----END----\n"</span> ) ;</span></pre></td></tr></table></figure><ul><li>但是一定要记得<strong>删除或注释静态调试语句</strong>！</li></ul><p>不然就会：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Wrong answer on line 1 , <span class="built_in">read</span> <span class="string">"------"</span> , expect <span class="string">"62137"</span> .</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[笔记]代码起手式</title>
      <link href="/post/initial-coding-style/"/>
      <url>/post/initial-coding-style/</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>这是的一篇学习笔记，供我平时复制粘贴。</p>          </div><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ntrl ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXN 10010</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXM 10010</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MOD 100007</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> file(FileName) freopen(#FileName<span class="meta-string">".in"</span>,<span class="meta-string">"r"</span>,stdin),freopen(#FileName<span class="meta-string">".out"</span>,<span class="meta-string">"w"</span>,stdout)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">///global variable///</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , m ; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/////*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">///basic function///</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> lint <span class="title">min</span> <span class="params">( lint x , lint y )</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y ; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> lint <span class="title">max</span> <span class="params">( lint x , lint y )</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y ; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isltr</span> <span class="params">( <span class="keyword">char</span> x )</span> </span>&#123; <span class="keyword">return</span> ( <span class="string">'A'</span> &lt;= x &amp;&amp; x &lt;= <span class="string">'Z'</span> ) || ( <span class="string">'a'</span> &lt;= x &amp;&amp; x &lt;= <span class="string">'z'</span> ) ; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isnum</span> <span class="params">( <span class="keyword">char</span> x )</span> </span>&#123; <span class="keyword">return</span> ( <span class="string">'0'</span> &lt;= x &amp;&amp; x &lt;= <span class="string">'9'</span>) ; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/////*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">///fast read///</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> lint <span class="title">readlint</span> <span class="params">( )</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lint val = <span class="number">0</span> , sign = <span class="number">1</span> ; <span class="keyword">char</span> tmp = getchar ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( ! isnum ( tmp ) ) &#123; <span class="keyword">if</span> ( tmp == <span class="string">'-'</span> ) &#123; sign = - sign ; &#125; tmp = getchar ( ) ;  &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( isnum ( tmp ) ) &#123; val = ( val &lt;&lt; <span class="number">1</span> ) + ( val &lt;&lt; <span class="number">3</span> ) + tmp - <span class="number">48</span> ; tmp = getchar ( ) ; &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> val * sign ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readlter</span> <span class="params">( )</span> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> tmp = getchar ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( ! isltr ( tmp ) )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tmp = getchar ( ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> tmp ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/////*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span> ( <span class="string">"\n"</span> ) ; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><div class="note default no-icon">            <h2 id="内容修改与更新"><a class="markdownIt-Anchor" href="#内容修改与更新"></a> 内容修改与更新</h2><p><strong>2019-11-13</strong> 将两代码整合，修改部分变量。<br /><strong>2019-11-14</strong> 修复了代码，防止编译错误。<br /><strong>2019-11-15</strong> 修复了代码，防止了答案错误。<br /><strong>2019-11-15</strong> 更改了码风，添加了<code>max()</code>与<code>min()</code>。<br /><strong>2019-12-20</strong> 推翻重构，更新了码源。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[经验]将Lemon评测系统&#39;安装&#39;至(Ubuntu)Linux</title>
      <link href="/post/project-lemon-for-linux/"/>
      <url>/post/project-lemon-for-linux/</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p><strong>Project Lemon</strong> 是一个不错的评测系统，尤其对于小型比赛更是不二选择。但是关于在(Ubuntu)Linux系统下安装 Project Lemon 的文章不多，有些还有坑。所以在踩了不少坑之后，总结出来了这些安装 Project Lemon 的经验。希望对想在 Linux 系统下安装 Project Lemon 的小伙伴们有些帮助。</p>          </div><h2 id="关于project-lemon"><a class="markdownIt-Anchor" href="#关于project-lemon"></a> 关于Project Lemon</h2><p>Project Lemon 是由 <strong>Zhipeng Jia</strong> 开发的一个<strong>简易OI竞赛测试环境</strong>。它是一个开源OI评测机，兼容性比Cena更好，更快，更稳定。</p><p>关于 Project Lemon ，可以在下载后在[帮助]&gt;[关于]内查看。这里废话不多说，直接上图。</p><p><img alt="project_lemon[about].png" data-src="https://s2.ax1x.com/2019/11/09/MmfuFJ.png" class="lazyload"></p><p>Project Lemon资源：</p><ul><li><a href="https://github.com/Sojiv/Project_lemon" target="_blank" rel="noopener">Github</a></li><li><a href="https://code.google.com/archive/p/project-lemon/" target="_blank" rel="noopener">Google Code</a></li><li>如果觉得lemon一般，可以试试 <a href="https://github.com/iotang/Project_LemonLime" target="_blank" rel="noopener">lemonlime</a> 。(一样可以使用本文方式安装)</li></ul><h2 id="获取project-lemon"><a class="markdownIt-Anchor" href="#获取project-lemon"></a> 获取Project Lemon</h2><p>这里我使用的是 <strong>Github</strong> 的方式获取资源。</p><p><strong>注意，以下两种方式任选其一即可！</strong></p><h3 id="获取方法一下载压缩包"><a class="markdownIt-Anchor" href="#获取方法一下载压缩包"></a> 获取方法一：下载压缩包</h3><ul><li>首先下载.zip文件</li></ul><p><img alt="project_lemon[clone_or_download].png" data-src="https://s2.ax1x.com/2019/11/09/MeLyAx.png" class="lazyload"></p><ul><li>接着使用<strong>归档管理器</strong>打开，提取。</li></ul><p><img alt="project_lemon[extract].png" data-src="https://s2.ax1x.com/2019/11/09/MeOLIx.png" class="lazyload"></p><ul><li>提取完成后，通过[Ctrl]+[Alt]+[T]打开终端，进入’Project_lemon-master/'的<strong>上一级目录</strong>，例如：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> My_file/</span></pre></td></tr></table></figure><ul><li>接着克隆至’/opt’目录下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv Project_lemon_master/ lemon/</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo cp -r lemon/ /opt/</span></pre></td></tr></table></figure><ul><li>为防止意外，<strong>加个权限</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod -R +777 /opt/lemon/</span></pre></td></tr></table></figure><ul><li>完成，进入下一步</li></ul><h3 id="获取方法二git-clone"><a class="markdownIt-Anchor" href="#获取方法二git-clone"></a> 获取方法二：git-clone</h3><ul><li>通过[Ctrl]+[Alt]+[T]打开终端。</li><li>接着<strong>进入目录</strong>，使用git-clone</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> My_file/</span></pre></td></tr><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Sojiv/Project_lemon.git</span></pre></td></tr></table></figure><ul><li>重命名该文件夹。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv Project_lemon/ lemon/</span></pre></td></tr></table></figure><ul><li>完成，克隆至’/opt’目录下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -r lemon/ /opt/</span></pre></td></tr></table></figure><ul><li>为防止意外，<strong>加个权限</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod -R +777 /opt/lemon/</span></pre></td></tr></table></figure><ul><li>完成，进入下一步</li></ul><h2 id="安装project-lemon"><a class="markdownIt-Anchor" href="#安装project-lemon"></a> '安装’Project Lemon</h2><ul><li>通过’cd’指令<strong>进入</strong>’/opt/lemon/'<strong>文件夹</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lemon/</span></pre></td></tr></table></figure><ul><li><strong>编译</strong>它(需要安装qt4-dev-tool:<code>sudo apt-get install qt4-dev-tools</code>)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qmake lemon.pro</span></pre></td></tr><tr><td class="code"><pre><span class="line">make</span></pre></td></tr></table></figure><ul><li>然后，向’bin’里<strong>放个连接</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln lemon /bin/</span></pre></td></tr></table></figure><ul><li>完成，进入下一步。</li></ul><h2 id="链接project-lemon"><a class="markdownIt-Anchor" href="#链接project-lemon"></a> 链接Project Lemon</h2><ul><li>为了更好的使用 Project Lemon ，为它添加一个快捷方式。</li><li>通过’cd’指令<strong>进入</strong>’/usr/share/applications/'<strong>文件夹</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/applications/</span></pre></td></tr></table></figure><ul><li>创建一个’lemon.desktop’的<strong>桌面图标文件</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo touch lemon.desktop</span></pre></td></tr></table></figure><ul><li><strong>以管理员身份</strong>，使用 gedit 编辑它。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit lemon.desktop</span></pre></td></tr></table></figure><ul><li>在’lemon.desktop’编辑，将其修改为以下内容：</li></ul><blockquote><p>[Desktop Entry]<br>Encoding=UTF-8<br>Name=lemon<br>Comment=lemon<br>Exec=/opt/lemon/lemon<br>Icon=/opt/lemon/icon.png<br>Terminal=false<br>StartupNotify=true<br>Type=Application<br>Categories=Development</p></blockquote><ul><li>然后完成啦，检查一下软件列表吧。</li></ul><h2 id="参考和引用"><a class="markdownIt-Anchor" href="#参考和引用"></a> 参考和引用</h2><ul><li><a href="https://blog.csdn.net/jack_purple/article/details/54744074" target="_blank" rel="noopener">Linux添加程序到应用列表 - jack_purple的博客 - CSDN博客</a></li><li><a href="https://github.com/Sojiv/Project_lemon" target="_blank" rel="noopener">[Github]Sojiv/Project_lemon</a></li><li><a href="http://m.zhizuobiao.com/linux/linux-18091800079/" target="_blank" rel="noopener">Linux运维知识之linux安装project lemon测评机</a></li><li><a href="https://blog.csdn.net/OoLuoChenoO/article/details/75669563" target="_blank" rel="noopener">Lemon Judge OI评测机 | 资源及使用教程 | 比Cena更稳定的评测机 | 已完结</a></li></ul><div class="note default no-icon">            <h2 id="内容修改与更新"><a class="markdownIt-Anchor" href="#内容修改与更新"></a> 内容修改与更新</h2><p><strong>2019-11-11</strong> 修改序号清单，修复代码区块显示问题。<br><strong>2019-11-13</strong> 更改部分语言表述，以使其通顺。<br><strong>2019-11-14</strong> 新增lemonlime的链接，修改部分换行。<br><strong>2019-12-05</strong> 修复了文件夹创建的bug。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
